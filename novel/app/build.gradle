apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'org.greenrobot.greendao'


kapt {
    arguments {
        arg("moduleName", project.getName())
    }
}

def gitSha() {
    String gitRev = '1.3.0'
    return gitRev
}

def javaVersion = JavaVersion.VERSION_1_7

android {
    compileSdkVersion compile_sdk_version
    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        applicationId "com.duoyue.mianfei.xiaoshuo"
        versionCode 40
        versionName "1.3.0"
        multiDexEnabled = true
        flavorDimensions "versionCode"

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "198b0e5b36a76f51f43ac9fb", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]

        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!
         */
        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
    }

    signingConfigs {
        config {
            keyAlias 'duoyue'
            keyPassword '93bf46e9b15c4953bc7352d01ae17fbe'
            storeFile file('key.jks')
            storePassword '93bf46e9b15c4953bc7352d01ae17fbe'
        }
    }

    androidExtensions {
        experimental = true
    }

    buildTypes {
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            debuggable true
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.config
        }

        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true

            // 移除无用的resource文件
            shrinkResources true
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
            signingConfig signingConfigs.config
        }
    }
    productFlavors {
        /*DYVIVO_0430 {}
        DYOPPO_0430 {}
        DY04_XIAOMI {}
        DYHW_0430 {}
        DY04_MEIZU {}
        DY04_BAIDU {}
        DY360_0430 {}
        DYQQ_0430 {}
        DY04_ALI {}
        YYB_01 {}*/
        /*AIGAO_006 {}
        AIGAO_008 {}
        AIGAO_009 {}
        AIGAO_010 {}*/
//         定制渠道 包名替换com.yuedu.xiaoshuo，图标替换，启动页底部图标隐藏，启动页延时取消，应用取名阅读
//        KY002 {}
//        TOUTIAO {}
//        H5_001 {}
//        DY04_SAN {}
//        DY05_SGHJ {}
//        DY05_DATA {}
//        DY05_KUAISHOU {}
//          ali {}
//        LK666_LK888 {}
        //       LK1008_0000 {}
//        LK555_666 {}
//        AIGAO_008 {}
        // 今日头条广告渠道：必须以XXL_开头，以_分割BOOK_ID；第二个字段必须书BOOK_ID！
//        XXL_19411_B {}
//        XXL_20964 {}
        //今日头条定制包.
          //XXL_12077 {}
        //BD_27149 {}
        //XXL_28180 {}
        XXL_27149 {}
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [
                    UMENG_CHANNEL_VALUE: name
            ]
        }
    }


    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    //recommend
    dexOptions {
        jumboMode = true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    greendao {
        schemaVersion 1
        daoPackage 'com.duoyue.app.dao.gen'
        targetGenDir 'src/main/java'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    kapt "com.alibaba:arouter-compiler:$arouter_compiler_version"
    ///implementation(name: 'open_ad_sdk', ext: 'aar')
    implementation project(':mod-ad')
    implementation project(':lib-base')
    implementation project(':mod-stats')
    implementation project(':mod-share')

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:4.2'
    testImplementation 'org.robolectric:shadows-multidex:4.2'

    implementation("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    compileOnly("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }

    implementation project(':mod-tinker')

    //微信SDK
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:5.1.4'
    implementation 'com.android.support:recyclerview-v7:28.0.0'

//    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.6.1'
//    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-alpha-3'
}

repositories {
    flatDir {
        dirs '../mod-ad/libs', '../mod-stats/libs'
    }
}

// -----------------tinker---------------
def bakPath = file("${buildDir}/bakApk/")


ext {
    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    tinkerEnabled = true

    //for normal build
    //old apk file to build patch apk
    tinkerOldApkPath = "${bakPath}/app-debug-0424-15-02-56.apk"
    //proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${bakPath}/app-debug-1018-17-32-47-mapping.txt"
    //resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${bakPath}/app-debug-0424-15-02-56-R.txt"

    //only use for build all flavor, if not, just ignore this field

    tinkerBuildFlavorDirectory = "${bakPath}/app-0823-11-20-52"
}


def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? Boolean.parseBoolean(TINKER_ENABLE) : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        oldApk = getOldApkPath()

        ignoreWarning = false

        useSign = true

        tinkerEnable = buildWithTinker()

        buildConfig {

            applyMapping = getApplyMappingPath()

            applyResourceMapping = getApplyResourceMappingPath()

            tinkerId = getTinkerIdValue()

            keepDexApply = true

            isProtectedApp = false

            supportHotplugComponent = false
        }

        dex {
            dexMode = "jar"

            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]

            loader = [
                    //use sample, let BaseBuildInfo unchangeable with tinker
                    "tinker.sample.android.app.BaseBuildInfo"
            ]
        }

        lib {
            pattern = ["lib/*/*.so"]
        }

        res {
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            ignoreChange = ["assets/sample_meta.txt"]

            largeModSize = 100
        }

        packageConfig {
            configField("patchMessage", "tinker is sample to use")
            configField("platform", "all")
            configField("patchVersion", "0")
        }

        /**
         * if you don't use zipArtifact or path, we just use 7za to try
         */
        sevenZip {
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
//        path = "/usr/local/bin/7za"
        }
    }

    List<String> flavors = new ArrayList<>()
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    def date = new Date().format("MMdd-HH-mm-ss")

    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        def flavorName = variant.productFlavors[0].name
        def typeName = variant.buildType.name
        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    def loggerFilePath = "${buildDir}/generated/source/buildConfig/${flavorName}/${typeName}/com/duoyue/mianfei/xiaoshuo/BuildConfig.java"
                    def updatedDebug = new File(loggerFilePath).getText('UTF-8')
                            .replaceAll(flavorName, "FLAVOR")
                    new File(loggerFilePath).write(updatedDebug, 'UTF-8')

                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.first().outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                    }

                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                    }

                }
            }
        }
    }
}

task sortPublicTxt() {
    doLast {
        File originalFile = project.file("public.txt")
        File sortedFile = project.file("public_sort.txt")
        List<String> sortedLines = new ArrayList<>()
        originalFile.eachLine {
            sortedLines.add(it)
        }
        Collections.sort(sortedLines)
        sortedFile.delete()
        sortedLines.each {
            sortedFile.append("${it}\n")
        }
    }
}
